apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: job-admin-rolebinding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: job-admin-role
subjects:
- kind: ServiceAccount
  name: job-admin
  namespace: {{ .Release.Namespace }}
---    
apiVersion: v1
kind: ServiceAccount
metadata:
  name: job-admin
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: job-admin-role
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: ["apps"]
  resources: ["statefulsets", "statefulsets/scale"]
  verbs: ["get", "patch", "update"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "create"]
- apiGroups: [""] #core api group
  resources: ["configmaps", "serviceaccounts"]
  verbs: ["delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["rolebindings", "roles"]
  verbs: ["delete"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-post-install-scripts
  labels:
{{ include "awx-helm.labels" . | indent 4 }}
data:
  bootstrap.sh: |
    #!/bin/sh
    # install bash
    apk update
    apk upgrade
    apk add bash curl jq ncurses
    apk add --no-cache ansible
    # install kubectl
    curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    bash /usr/local/scripts/post_install.sh
  {{ (tpl (.Files.Glob "scripts/post_install.sh").AsConfig $ ) | nindent 2 }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-ansible-ldap-config
  labels:
{{ include "awx-helm.labels" . | indent 4 }}
data:
  deploy.yaml: |-
    ---
    - hosts: localhost ansible_connection=local
      gather_facts: false
      tasks:
        - name: configure ldap
          uri:
            method: PUT
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/settings/ldap/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
            body: "{{ "{{" }} lookup('template','./ldap_config.json.j2') {{ "}}" }}"
          register: config_result
          failed_when: config_result.status != 200
        - name: get job templates
          uri:
            method: GET
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/job_templates/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
          register: template_out
          failed_when: template_out.status != 200

        - name: remove demo job template
          uri:
            method: DELETE
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/job_templates/{{ "{{" }} template_out.json.results[0].id {{ "}}" }}/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
          register: template_delete
          when: template_out.json.count == 1
          failed_when: template_delete.status != 204

        - name: get credentials
          uri:
            method: GET
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/credentials/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
          register: credentials_out
          failed_when: credentials_out.status != 200

        - name: remove demo credential
          uri:
            method: DELETE
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/credentials/{{ "{{" }} credentials_out.json.results[0].id {{ "}}" }}/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
          register: credential_delete
          when: credentials_out.json.count == 1
          failed_when: credential_delete.status != 204

        - name: get projects
          uri:
            method: GET
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/projects/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
          register: projects_out
          failed_when: projects_out.status != 200

        - name: remove demo project
          uri:
            method: DELETE
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/projects/{{ "{{" }} projects_out.json.results[0].id {{ "}}" }}/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
          register: project_delete
          when: projects_out.json.count == 1
          failed_when: project_delete.status != 204

        - name: get inventories
          uri:
            method: GET
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/inventories/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
          register: inventories_out
          failed_when: inventories_out.status != 200

        - name: remove demo inventory
          uri:
            method: DELETE
            url: "http://{{ .Release.Name }}-web-svc.{{ .Release.Namespace }}.svc.cluster.local/api/v2/inventories/{{ "{{" }} inventories_out.json.results[0].id {{ "}}" }}/"
            user: {{ .Values.admin_user }}
            password: {{ .Values.admin_password }}
            force_basic_auth: yes
            validate_certs: no
            return_content: yes
            headers:
                Content-Type: "application/json"
            body_format: json
          register: inventory_delete
          when: inventories_out.json.count == 1
          failed_when: inventory_delete.status != 202

  ldap_config.json.j2: |
    {
        {{ if .Values.configure_ldap.allow_anonymous_bind }}
        "AUTH_LDAP_BIND_DN": "",
        "AUTH_LDAP_BIND_PASSWORD": "",
        {{ else }}
        "AUTH_LDAP_BIND_DN": "uid={{ .Values.configure_ldap.ldap_bind_username }},{{ .Values.configure_ldap.ldap_bind_ou }}",
        "AUTH_LDAP_BIND_PASSWORD": "{{ .Values.configure_ldap.ldap_bind_password }}",
        {{ end }}
        "AUTH_LDAP_CONNECTION_OPTIONS": {
            "OPT_NETWORK_TIMEOUT": 30,
            "OPT_REFERRALS": 0
        },
        "AUTH_LDAP_DENY_GROUP": null,
        "AUTH_LDAP_GROUP_SEARCH": [
            "{{ .Values.configure_ldap.ldap_group_search_dn }}",
            "SCOPE_SUBTREE",
            "(objectClass=groupofuniquenames)"
        ],
        "AUTH_LDAP_GROUP_TYPE": "GroupOfUniqueNamesType",
        "AUTH_LDAP_GROUP_TYPE_PARAMS": {},
        "AUTH_LDAP_TEAM_MAP": {},
        "AUTH_LDAP_REQUIRE_GROUP": null,
        "AUTH_LDAP_SERVER_URI": "{{ .Values.configure_ldap.ldap_server_uri }}",
        "AUTH_LDAP_START_TLS": false,
        "AUTH_LDAP_ORGANIZATION_MAP": {{ .Values.configure_ldap.ldap_organizations | toJson }},
        "AUTH_LDAP_USER_ATTR_MAP": {
            "email": "mail",
            "first_name": "givenName",
            "last_name": "sn"
        },
        "AUTH_LDAP_USER_DN_TEMPLATE": null,
        "AUTH_LDAP_USER_FLAGS_BY_GROUP": {
            "is_superuser": [
                "{{ .Values.configure_ldap.ldap_superuser_group }}"
            ]
        },
        "AUTH_LDAP_USER_SEARCH": [
            "{{ .Values.configure_ldap.ldap_user_search }}",
            "SCOPE_SUBTREE",
            "(uid=%(user)s)"
        ]
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-management
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "awx-helm.labels" . | indent 4 }}
spec:
  ttlSecondsAfterFinished: 10
  template:
    spec:
      initContainers:
      - name: {{ .Release.Name }}-init-wait
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do wget http://{{ .Release.Name }}-web-svc/ && exit 0 || sleep 3; done; exit 1"]
      containers:
        - name: {{ .Release.Name }}-management
          image: alpine:latest
          command: ["/bin/sh", "-c", "/usr/local/scripts/bootstrap.sh"]
          # command: ["/bin/sh", "-c", "while sleep 3600; do :; done"]
          stdin: true
          tty: true
          volumeMounts:
            - mountPath: /usr/local/scripts
              name: {{ .Release.Name }}-post-install
            - mountPath: /usr/local/ansible
              name: {{ .Release.Name }}-ansible-post-install
          resources:
      volumes:
        - name: {{ .Release.Name }}-post-install
          configMap:
            name: {{ .Release.Name }}-post-install-scripts
            defaultMode: 0777
            items:
              - key: bootstrap.sh
                path: bootstrap.sh
              - key: post_install.sh
                path: post_install.sh
              - key: hpa.yaml
                path: hpa.yaml
        - name: {{ .Release.Name }}-ansible-post-install
          configMap:
            name: {{ .Release.Name }}-ansible-ldap-config
            defaultMode: 0777
            items:
              - key: deploy.yaml
                path: deploy.yaml
              - key: ldap_config.json.j2
                path: ldap_config.json.j2
      restartPolicy: Never
      serviceAccountName: job-admin